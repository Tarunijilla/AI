import numpy as np

# Constants for players
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

class TicTacToe:
    def __init__(self):
        self.board = np.full((3, 3), EMPTY)
        self.current_player = PLAYER_X

    def print_board(self):
        print("\n".join([" | ".join(row) for row in self.board]))
        print()

    def make_move(self, row, col):
        if self.board[row, col] == EMPTY:
            self.board[row, col] = self.current_player
            return True
        return False

    def switch_player(self):
        self.current_player = PLAYER_O if self.current_player == PLAYER_X else PLAYER_X

    def check_winner(self):
        for row in range(3):
            if self.board[row, 0] == self.board[row, 1] == self.board[row, 2] != EMPTY:
                return self.board[row, 0]

        for col in range(3):
            if self.board[0, col] == self.board[1, col] == self.board[2, col] != EMPTY:
                return self.board[0, col]

        if self.board[0, 0] == self.board[1, 1] == self.board[2, 2] != EMPTY:
            return self.board[0, 0]

        if self.board[0, 2] == self.board[1, 1] == self.board[2, 0] != EMPTY:
            return self.board[0, 2]

        if EMPTY not in self.board:
            return "Draw"

        return None

    def minimax(self, depth, is_maximizing):
        winner = self.check_winner()
        if winner == PLAYER_O:
            return 1
        elif winner == PLAYER_X:
            return -1
        elif winner == "Draw":
            return 0

        if is_maximizing:
            best_score = -np.inf
            for row in range(3):
                for col in range(3):
                    if self.board[row, col] == EMPTY:
                        self.board[row, col] = PLAYER_O
                        score = self.minimax(depth + 1, False)
                        self.board[row, col] = EMPTY
                        best_score = max(score, best_score)
            return best_score
        else:
            best_score = np.inf
            for row in range(3):
                for col in range(3):
                    if self.board[row, col] == EMPTY:
                        self.board[row, col] = PLAYER_X
                        score = self.minimax(depth + 1, True)
                        self.board[row, col] = EMPTY
                        best_score = min(score, best_score)
            return best_score

    def ai_move(self):
        best_score = -np.inf
        best_move = (-1, -1)
        for row in range(3):
            for col in range(3):
                if self.board[row, col] == EMPTY:
                    self.board[row, col] = PLAYER_O
                    score = self.minimax(0, False)
                    self.board[row, col] = EMPTY
                    if score > best_score:
                        best_score = score
                        best_move = (row, col)

        self.make_move(best_move[0], best_move[1])

    def play_game(self):
        while True:
            self.print_board()
            if self.current_player == PLAYER_X:
                move = input("Enter your move (row and column): ").split()
                row, col = int(move[0]), int(move[1])
                if not self.make_move(row, col):
                    print("Invalid move. Try again.")
                    continue
            else:
                print("AI is making a move...")
                self.ai_move()

            winner = self.check_winner()
            if winner:
                self.print_board()
                if winner == "Draw":
                    print("It's a draw!")
                else:
                    print(f"The winner is {winner}!")
                break

            self.switch_player()
f __name__ == "__main__":
    game = TicTacToe()
    game.play_game()

